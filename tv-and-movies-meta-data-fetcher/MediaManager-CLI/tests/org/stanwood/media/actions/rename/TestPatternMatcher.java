/*
 *  Copyright (C) 2008-2011  John-Paul.Stanford <dev@stanwood.org.uk>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.stanwood.media.actions.rename;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.stanwood.media.setup.MediaDirConfig;
import org.stanwood.media.testdata.Data;
import org.stanwood.media.testdata.EpisodeData;
import org.stanwood.media.util.FileHelper;

/**
 * Used to check that the correct filenames are generated by the rename action
 */
@SuppressWarnings("nls")
public class TestPatternMatcher {

	/**
	 * Used to check that the correct TV filenames are generated by the rename action
	 * @throws Exception Thrown if their are problems
	 */
	@Test
	public void testNewTVShowName() throws Exception {
		File configDir = FileHelper.createTmpDir("config");
		File dir = FileHelper.createTmpDir("test");
		try {
			File eurekaDir = new File(dir, "Eureka");
			if (!eurekaDir.mkdir()) {
				throw new IOException("Unable to create directory: " + eurekaDir);
			}

			File heroesDir = new File(dir, "Heroes");
			if (!heroesDir.mkdir()) {
				throw new IOException("Unable to create directory: " + eurekaDir);
			}

			List<EpisodeData> episodes = Data.createEurekaShow(eurekaDir);

			PatternMatcher pm = new PatternMatcher();

			MediaDirConfig dirConfig = new MediaDirConfig();
			dirConfig.setPattern("%n/Season %s/%s %e {to %f }- %t{ %d}.%x");

			Assert.assertEquals("Eureka/Season 1/1 01 - Pilot.",getName(pm, dirConfig, episodes.get(0)));
			Assert.assertEquals("Eureka/Season 1/1 02 to 03 - Many Happy Returns.",getName(pm, dirConfig, episodes.get(1)));
			Assert.assertEquals("Eureka/Season 2/2 02 - Phoenix Rising.",getName(pm, dirConfig, episodes.get(2)));

		}
		finally {
			FileHelper.delete(configDir);
			if (dir!=null) {
				FileHelper.delete(dir);
			}
		}
	}

	protected String getName(PatternMatcher pm, MediaDirConfig dirConfig,
			EpisodeData episode) throws PatternException {
		String ext = FileHelper.getExtension(episode.getFile());
		String name = pm.getNewTVShowName(dirConfig, dirConfig.getPattern(), episode.getEpisode(), ext, null);
		return name;
	}
}
