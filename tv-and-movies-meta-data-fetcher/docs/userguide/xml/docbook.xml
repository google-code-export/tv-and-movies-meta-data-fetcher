<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY apptitle "MediaInfoFetcher">	
	<!ENTITY version "1.0">
	<!ENTITY mediarenamer "media-renamer">
]>
<book>
	<bookinfo>
		<title>&apptitle; user guide</title>
		<authorgroup>
			<author>
				<firstname>John-Paul</firstname>
				<surname>Stanford</surname>
				<affiliation>
					<address><email>dev@stanwood.org.uk</email></address>
				</affiliation>
			</author>			
		</authorgroup>
		<copyright>
			<year>2007</year>
			<holder>John-Paul Stanford</holder>
		</copyright>
		<abstract>	
			<para>
				This document describes usage of the application &apptitle; version &version;
			</para>
		</abstract>
	</bookinfo>	
	<chapter id="introduction">
		<title>Introduction</title>			
		<para>
			&apptitle; is a application and a API which can be used to retrieve TV show 
			and movie meta data from Internet sources. This information is then stored 
			locally and can be used to rename media files with the correct title.
		</para>		
		<sect1>
			<title>Features</title>
			<para>
				<itemizedlist>
					<listitem><para>Provides a CLI tool that renames media files with the correct names.</para></listitem>
					<listitem><para>Fetches TV Show and Film meta data from the Internet.</para></listitem>
					<listitem><para>Allows multiple sources and stores.</para></listitem>
					<listitem><para>Caches information in XML.</para></listitem>
					<listitem><para>Find film posters on the Internet for each film.</para></listitem>					
					<listitem><para>Provides a API for accessing the information.</para></listitem>
					<listitem><para>Provides a store that writes Sapphire XML files.</para></listitem>                                        
					<listitem><para>Provides a store that saves metadata into MP4/M4V files that iTunes can read.</para></listitem>
					<listitem><para>Runs on any platform that supports Java 1.6.</para></listitem>
				</itemizedlist>				
			</para>
		</sect1>	
		<sect1>
			<title>Sources</title>
			<para>
				Sources are the places that &apptitle; retrieves information from. Sources
				are read only so it's not possible to information back too them. Their are two 
				sources that come with &apptitle;, however others can be added.
			</para>
			<sect2>
				<title>org.stanwood.media.source.TVCOMSource</title>
				<para>
				The www.tv.com source will fetch TV Show information from the www.tv.com site.
				This source also allows TV shows searching.
				</para>
			</sect2>
			<sect2>
				<title>org.stanwood.media.source.IMDBSource</title>
				<para>
				The www.imdb.com source will fetch Film information from the www.imdb.com. This
				source also allows Film searching.
				</para>
				<para>
				This source has the option parameter "RegexpToReplace", which is used when searching for a film
                via the film's filename. The parameter is a regular expression, that when found in the filename,
                is removed.   
				</para>
				<para>
                      It has the following parameters:
                      <itemizedlist>
                      	<listitem><para><literal>RegexpToReplace</literal> a regular expression, that when found in the filename, is removed</para></listitem>
                     </itemizedlist>
				</para>
			</sect2>
			<sect2>
				<title>org.stanwood.media.source.HybridFilmSource</title>
				<para>
				The HybridFilm Source is a bit different to the other sources. It uses the other sources to 
				find the best information it can about a film. This is the preferred source to use when
				fetching film information.
				</para>				
				<para>
				This source has the option parameter "RegexpToReplace", which is used when searching for a film
                via the film's filename. The parameter is a regular expression, that when found in the filename,
                is removed.   
				</para>
				<para>
                      It has the following parameters:
                      <itemizedlist>
                      	<listitem><para><literal>RegexpToReplace</literal> a regular expression, that when found in the filename, is removed</para></listitem>
                     </itemizedlist>
				</para>
			</sect2>
		</sect1>
		<sect1>
			<title>Stores</title>
			<para>
				Stores are similar too sources, except that they are also writable. Once
				information has been retrieved from a source, it is written too a store.
				Next time the information is needed, it can be retrieved from the store.
				This makes retrieving information a lot faster.  
			</para>
                        <para>
                                Stores can have parameters. These parameters are entered via the configuration file.
                                The stores will validated their parameters when the store is access and report
                                back any problems that are found.
                        </para>
			<para>
				Their are 4 stores that come with &apptitle;. Each of these has different
				properties. Some of these stores can also be used by applications such as 
				media centre's to display media metadata. 				
			</para>
			<sect2>
				<title>org.stanwood.media.store.memory.MemoryStore</title>
				<para>
				This store is used to store the show information in memory. This allows the tool
 				reuse the show information without having to fetch it from other stores or sources 
 				(which would be slower). This information will be lost once the application exits. 
				</para>
			</sect2>
			<sect2>
				<title>org.stanwood.media.store.XMLStore</title>
				<para>
				This store is used to store the show information in a XML called &apos;.show.xml. &apos; 
               	This is located in the directory were the show is located. It can hold all
 				of the information of the Shows, Seasons, Episodes and Specials. This store
 				can be read and written too, and it's also possible too lookup the show id 
 				of the show in the current directory.
				</para>
			</sect2>
			<sect2>
				<title>org.stanwood.media.store.SapphireStore</title>
				<para>
				This is a write only store that is used to store information in a format that can 
 				be used by the <ulink url="http://appletv.nanopi.net/">Sapphire</ulink> frontrow plugin. 
 				The details of the XML format can be found <ulink url="http://appletv.nanopi.net/manual/overriding-metadata/">here</ulink>.
				</para>
				<para>  				
 				Every time episode or film information is fetched from a source, a XML file is written with 
 				the name name as the episode or film file (except the extension is changed too .xml).
				</para>
				<para>
 				This store has the optional parameter "PreferredCertificationCounrty". If this is set, then
 				when fetching the rating, this country in the parameter's rating is used. If the paramter is not set 
 				or the country can't be found, then the first rating is used.
 				</para>
 				<para>
                      It has the following parameters:
                      <itemizedlist>
                      	<listitem><para><literal>PreferredCertificationCounrty</literal> The preferred counties rating to use.</para></listitem>
                     </itemizedlist>
				</para>
			</sect2>
             <sect2>
                     <title>org.stanwood.media.store.mp4.MP4ITunesStore</title>
                     <para>
                     This store is a write only store, that is used to store meta data for films and TV shows in .mp4 and m4v files. This
                     information can be read by iTunes. It does this by using the application <ulink url="http://atomicparsley.sourceforge.net/">AtomicParsley</ulink>.  
                     </para>
                     <para>
                           It has the following parameters:
                           <itemizedlist>
                             <listitem><para><literal>AtomicParsleyPath</literal>The location of the AtomicParsley application</para></listitem>
                           </itemizedlist>
                     </para>
             </sect2>
             <sect2>
             		<title>org.stanwood.media.store.mythtv.MythTVStore</title>
             		<para>
             		This is a write only store that is used to store Film information in a 
             		<ulink url="http://www.mythtv.org/">Myth TV</ulink> database hosted in a 
                    MySQL database. .
             		</para>
             		<para>  				
 					Every time film information is fetched from a source, he film information is 
 					inserted/updated in the Myth TV database. Cover images are also fetched and 
 					placed in a directory (which is configured via a parameter). The location of 
 					these images is inserted with the film into the database.
					</para>
					<para>
					This store has several required parameters:
					  <itemizedlist>
					       <listitem><para><literal>DatabaseHost</literal>The host name of the database server</para></listitem>
					  	   <listitem><para><literal>DatabaseName</literal>The name of the Myth TV database</para></listitem>
					       <listitem><para><literal>DatabaseUser</literal>The user name used to access the Myth TV database</para></listitem>
					       <listitem><para><literal>DatabasePassword</literal>The password of the user used to access the Myth TV database</para></listitem>
					  </itemizedlist>
					  This store has these optional parameters:
					  <itemizedlist>
					       <listitem><para><literal>CoversPath</literal>If set to a directory, then covers images are stored in the directory</para></listitem>
					  </itemizedlist>
					</para>
             </sect2>
		</sect1>				
	</chapter>
	<chapter id="installation">
		<title>Installation</title>
		<para>
			Their are a few different ways to install &apptitle;. The different distributions 
		    can be found at <ulink url="http://code.google.com/p/tv-and-movies-meta-data-fetcher/downloads/list"><citetitle>Downloads</citetitle></ulink> 
		</para>
		<para>
			All of the distributions will require a Java 1.6 compatible JRE.
		</para>
		<sect1>
			<title>1. Linux Binary Distribution Packages</title>
			<para>
				Their are several linux distribution packages that can be found in the downloads section of the website.
				If your distribution uses RPM packages, then following these instructions.
				<orderedlist>
					<listitem><para>Pick the packages for your distribution</para></listitem>				
					<listitem><para>Download them to a directory</para></listitem>					
					<listitem><para>Change to that directory from the console</para></listitem>					
					<listitem><para>Log in as root and run the command <command>rpm -Uvh *.rpm</command></para></listitem>
				</orderedlist>				
			</para>
			<para>
				This will install the the application and a script too launch it. The script is located at <command>/usr/bin/media-renamer</command>
			</para>
		</sect1>		
		<sect1>
			<title>2. Any platform static Jar Disturbution</title>
			<para>
				Their is a static jar distribution avaliable on the downloads page. This will run on any platform with the
				correct JRE. Simply download it too your system, and type the command:
				<cmdsynopsis><command>java -jar MediaInfoFetcher-&version;-static-bin.jar </command><arg>options</arg></cmdsynopsis>
			    This can be used to rename media files and uses the same command line parameters 
			    as the <link linkend="mediarenamercmd">media-renamer</link> script.
			</para>
		</sect1>
	</chapter>
	<chapter id="usage">
		<title>CLI Usage</title>
		<para></para>
		<sect1 id="mediarenamercmd">
			<title id="mediarenamercmd.title">&mediarenamer;</title>
			<para>
				The &mediarenamer; command is used to rename media files such as TV Shows in a directory with the correct names.
				The information is fetched from sources and the information to when performing the renaming. In order that 
				it does not have to fetch the data every time, the data is cached in stores.
				<cmdsynopsis>
					<command>media-renamer</command>
					<arg>-h</arg>
					<arg>-s <replaceable>showId</replaceable></arg>
					<arg>-d <replaceable>media directory</replaceable></arg>
					<arg>-p <replaceable>rename pattern</replaceable></arg>
					<arg>-o <replaceable>source id</replaceable></arg>
					<arg>-r</arg>
					<arg>-c <replaceable>config file</replaceable></arg>
					<arg>-m <replaceable>TV|FILM</replaceable></arg>
					<arg>-l <replaceable>INFO|DEBUG|log4j configuration file</replaceable></arg>
				</cmdsynopsis>
			</para>
			<para>
				The command has the following options:
				<itemizedlist>
					<listitem><para><literal>-h, --help</literal> Show the help message</para></listitem>
					<listitem><para><literal>-s, --showid</literal> The ID of the movie/show. If not present, then it will search for the show id. Only usable in TV mode.</para></listitem>
					<listitem><para><literal>-d, --dir</literal> The directory to look for media. If not present use the current directory.</para></listitem>
					<listitem><para><literal>-p, --pattern</literal> The pattern used to rename files. Defaults to "%s %e - %t.%x" if not present.</para></listitem>
					<listitem><para><literal>-o, --source</literal> The id if the source too look up meta data in. Defaults too tvcom if not present.</para></listitem>
					<listitem><para><literal>-r, --refresh</literal> If this option is present, it will make the stores get regenerated from source.</para></listitem>
					<listitem><para><literal>-c, --config_file</literal> The location of the config file. If not present, attempts to load it from /etc/mediafetcher-conf.xml</para></listitem>
					<listitem><para><literal>-m, --mode</literal> The mode that the tool will work in. Either FILM or TV.</para></listitem>
					<listitem><para><literal>-l, --log_config</literal> The log configuration mode. Either INFO, or DEBUG for the built in configurations, or a file name of a log4j configuration file. </para></listitem>
					<listitem><para><literal>-R, --recursive</literal> Also process subdirectories</para></listitem>
				</itemizedlist>				
			</para>			
			<para>
				The &mediarenamer; command has two modes of operations. These are TV and Film modes.
				If mode can be used by setting the <literal>--mode</literal> option on the command line.
				If the mode option is not given, then the command chooses a default mode. First of it checks
				to see if the <literal>--showid</literal> option has been used. If it has, then the 
				mode is set to TV. Next it checks the path of the media directory to see if any
				of the directory names in the path contains the names "Films" or "Movies". If it does,
				then the mode is set to Film, otherwise it is set to TV.
			</para>						
			<para>
				It is possible to configure which sources and stores are used by the application.
				This is done by using a configuration file. If the <literal>--config</literal> option
				is used, then the file passed into this is the configuration file that will be used.
				If the <literal>--config</literal> option is not used, then first off the application
				looks for a configuration file located at <filename>/etc/mediafetcher-conf.xml</filename>.
				If that can't be found, then it uses in built defaults. For more information on the configuration
				files, see the <link linkend="configuration">Configuration section</link>.
			</para>
			<sect2>
				<title>TV Mode</title>				
				<para>
					The &mediarenamer; command presumes that each TV show's media files are contained 
					in a directory. It also has the ability to search for the TV Shows id by using the
					directory name as the name of the show, so it would be beneficial if the media
					files for each show are in a directory with the shows name. 								
				</para>
				<para>
					Too override the show ID been used, use the <literal>--showid</literal> option on 
					the CLI. If you are using stores, they will store the show id (if they support
					this functionality). This can then be used when searching for a show id instead
					of the directory name.				
				</para>
			</sect2>
			<sect2>
				<title>Film Mode</title>
				<para>
					When the &mediarenamer; command is used in film mode, it will treat all the media
					files it finds as Films. It looks up the ID's from the file names. First the file names
					are tidied up, then stores and sources are searched using the file names. If the 
					Film is found, then it is renamed using either the default pattern or the one given 
					via the <literal>--pattern</literal> option.
				</para>
			</sect2>
			<sect2>
				<title>Pattern</title>
				<para>Each of the files that is renamed is done according to a pattern. A pattern 
				is a text string that contains tokens. These tokens are replaced by the
				show/episode information.  
				</para>
				<para>
					The following list contains the meaning for each token:
					<itemizedlist>
					 	<listitem><para><literal>%h</literal> - show Id</para></listitem>
 						<listitem><para><literal>%s</literal> - seaspn number</para></listitem> 
 						<listitem><para><literal>%e</literal> - episode number</para></listitem>
 						<listitem><para><literal>%n</literal> - show name</para></listitem>
 						<listitem><para><literal>%t</literal> - episode title or film title</para></listitem>
 						<listitem><para><literal>%x</literal> - extension (avi, mkv....)</para></listitem> 						
 						<listitem><para><literal>%%</literal> - add a % char</para></listitem>
					</itemizedlist>
				</para>				
				<example>
					<title>Examples:</title>
					<para>
						The following options show what happens when they are used to rename 
					     the 4th episode of the 2nd season of the show heroes.
					     <itemizedlist>
					     	<listitem><para>"S%s E%e - %t.%x" = "S2 E04 - The Kindness of Strangers.avi"</para></listitem>
					     	<listitem><para>"%sx%e.%n.%t.%x" = "2x04.Heroes.The Kindness of Strangers.avi"</para></listitem>
					     	<listitem><para>"%sx%e.%h.%t.%x" = "2x04.17552.The Kindness of Strangers.avi"</para></listitem>
					     </itemizedlist>
					</para>
				</example>				
			</sect2>
		</sect1>
	</chapter>
	<chapter id="configuration">
		<title>Configuration</title>
		<para>The applications and the API make use of a XML configuration file. This
			  tells them which sources and stores should be used.
		</para>
		<para>
			The applications have CLI options that can be used too tell it which configuration
			file too use. If this option is not present, then it will look for the file at the 
			location <filename>/etc/mediafetcher-conf.xml</filename>. If this can't be found,
			it will fall back too using default settings.
		</para>
		<para>
			
			<example>		
				<title>The default configuration file</title>
				<programlisting>
			<![CDATA[<config>
       <sources>
              <!-- www.tv.com TV Show information source -->
			  <source id="org.stanwood.media.source.TVCOMSource"/>
			
			  <!-- www.imdb.com The film information source -->
			  <source id="org.stanwood.media.source.IMDBSource"/>
       </sources>
       <stores>
               <!-- Caches data in memory while the application is running -->
               <store id="org.stanwood.media.store.memory.MemoryStore"/>

               <!-- A Store for saving Show/Movies in a XML file in the current directory -->
                <store id="org.stanwood.media.store.XMLStore"/>
        </stores>
</config>]]>			
				</programlisting>
			</example>			
		</para>
		<para>
			Some of the stores and sources can also have parameters, the following example shows how to setup 
			the MP4ITunesStore so that it can find the AtomicParsley command and use it to store
			TV Show/Film information into .mp4 and .m4v files that iTunes can read.
			<example>		
				<title>Configuration file using parameters</title>
				<programlisting>
			<![CDATA[<config>
       <sources>
              <!-- www.tv.com TV Show information source -->
			  <source id="org.stanwood.media.source.TVCOMSource"/>
			
			  <!-- www.imdb.com The film information source -->
			  <source id="org.stanwood.media.source.IMDBSource"/>
       </sources>
       <stores>
               <!-- Caches data in memory while the application is running -->
               <store id="org.stanwood.media.store.memory.MemoryStore"/>

               <!-- A Store for saving Show/Movies in a XML file in the current directory -->
                <store id="org.stanwood.media.store.XMLStore"/>
                
               <!-- A Store for saving Show/Movies meta data into .mp4 and .m4v files so that
                    it can be read by iTunes. -->
               <store id="org.stanwood.media.store.mp4.MP4ITunesStore">
               		<param name="AtomicParsleyPath" value="/usr/local/bin/AtomicParsley"/>
               </store>      
        </stores>
</config>]]>			
				</programlisting>
			</example>	
		</para>
	</chapter>
	<chapter id="credits-and-licenses">
		<title>Credits and Licenses</title>
		
		<para>&apptitle;</para>
		<itemizedlist>
			<listitem>
				<para>John-Paul Stanford <email>dev@stanwood.org.uk</email> - Original Author</para>
			</listitem>
		</itemizedlist>
		<para>
        	Documentation copyright 2008-2009, John-Paul Stanford
            <email>dev@stanwood.org.uk</email>
		</para>		
	</chapter>
	
</book>