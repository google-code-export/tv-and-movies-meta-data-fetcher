<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY apptitle "@@name@@">
<!ENTITY version "@@version@@">
<!ENTITY mmmanager "mm-manager">
<!ENTITY mmxbmc "mm-xbmc">
<!ENTITY mmmovemedia "mm-move-into-media-directory">
<!ENTITY mmcopystore "mm-copy-store-to-store">
<!ENTITY mmlistatoms "mm-media-file-info">
<!ENTITY mmimportmedia "mm-import-media">
<!ENTITY mmprintdbschema "mm-print-db-schema">
<!ENTITY copyrightdate "2007-2012">
<!ENTITY copyholder "John-Paul Stanford">
]>
<book>
  <bookinfo>
    <title>&apptitle; user guide</title>

    <authorgroup>
      <author>
        <firstname>John-Paul</firstname>

        <surname>Stanford</surname>

        <affiliation>
          <address><email>dev@stanwood.org.uk</email></address>
        </affiliation>
      </author>
    </authorgroup>

    <copyright>
      <year>&copyrightdate;</year>

      <holder>&copyholder;</holder>
    </copyright>

    <abstract>
      <para>This document describes usage of the application &apptitle;
      version &version;</para>
    </abstract>
  </bookinfo>

  <chapter id="introduction">
    <title>Introduction</title>

    <para>&apptitle; is a application and a API which can be used to retrieve
    TV show and movie meta data from Internet sources. This information is
    then stored locally and can be used to perform actions upon the file
    files, such as renaming the media files based on meta data.</para>

    <sect1>
      <title>Features</title>

      <para><itemizedlist>
          <listitem>
            <para>Provides a CLI tool that renames media files with the
            correct names.</para>
          </listitem>

          <listitem>
            <para>Fetches TV Show and Film meta data from the Internet.</para>
          </listitem>

          <listitem>
            <para>Multiple sources of media information including XBMC meta
            data parsers.</para>
          </listitem>

          <listitem>
            <para>Cache media information locally in stores, including a XML
            store.</para>
          </listitem>

          <listitem>
            <para>Run actions on the media, such as renaming it based on media
            information</para>
          </listitem>

          <listitem>
            <para>Provides a action for executing system commands on media
            files</para>
          </listitem>

          <listitem>
            <para>Provides a action creating video podcasts of media
            files</para>
          </listitem>

          <listitem>
            <para>Provides a API for accessing the media information.</para>
          </listitem>

          <listitem>
            <para>Provides a store that writes Sapphire XML files.</para>
          </listitem>

          <listitem>
            <para>Provides a store that saves metadata into MP4/M4V files that
            iTunes can read.</para>
          </listitem>

          <listitem>
            <para>Allows plugins to be registers so that custom Sources,
            Stores and Actions can be added.</para>
          </listitem>

          <listitem>
            <para>Provides a command line tool to manage XBMC addon
            scrapers.</para>
          </listitem>

          <listitem>
            <para>Runs on any platform that supports Java 1.6.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>Sources</title>

      <para>Sources are the places that &apptitle; retrieves media information
      from. Sources are read only, so it's not possible to write information
      back too them. The following sources come with &apptitle;, however
      others can be added.</para>

      <sect2 id="XBMCSource">
        <title>org.stanwood.media.source.xbmc.XBMCSource</title>

        <para>This is the main source that &apptitle; was desgined to use. It
        makes use of XBMC scrappers to fetch media information. It is capable
        of reading both TV Show and Film information if the XBMC Scraper
        supports it.</para>

        <para>In order for for this source to work, their must be XBMC addon
        scrapers installed. These can be installed and managed using the
        command line tool &mmxbmc;</para>

        <para>Any parameters set on this source are passed through to the XBMC
        addon scrapers as parameters. In addition this source also supports
        the following parameters <itemizedlist>
            <listitem>
              <para><literal>scrapers</literal> a comma seperated list of XBMC
              scraper ID's. These are the ID's of scrappers that are useable.
              If not given, then all scrappers are considered useable.</para>
            </listitem>
          </itemizedlist></para>

        <sect3>
          <title>Configuration</title>

          <para>In addition to the source parameters, their is also a section
          of the configuration file that holds settings for all the XBMC
          sources. The XBMCAddon element in the configuration file has the
          following optional attributes: <itemizedlist>
              <listitem>
                <para><literal>directory</literal> - The directory one system
                to store addons. Defaults to
                "$HOME/.mediaManager/addons".<literal/></para>
              </listitem>

              <listitem>
                <para><literal>locale</literal> - The locale to use with the
                addons. Defaults to "en".</para>
              </listitem>

              <listitem>
                <para><literal>addonSite</literal> - The site to install
                addons from. Defaults to
                "http://mirrors.xbmc.org/addons/dharma".</para>
              </listitem>
            </itemizedlist><example>
              <title>XBMC settings example</title>

              <programlisting>&lt;mediaManager&gt;
  &lt;XBMCAddons directory="$HOME/.mediaManager/addons"
              locale="en"
              addonSite="http://mirrors.xbmc.org/addons/dharma"/&gt;
&lt;/mediaManager&gt;
</programlisting>
            </example></para>
        </sect3>
      </sect2>

      <sect2>
        <title>org.stanwood.media.source.TagChimpSource</title>

        <para>The TagChimpSource Source is film source that fetchs film
        information from the website <ulink
        url="http://www.tagchimp.com/">www.tagchimp.com</ulink>. This also
        includes chapter information.</para>
      </sect2>

      <sect2>
        <title>org.stanwood.media.source.HybridFilmSource</title>

        <para>The HybridFilm Source is a bit different to the other sources.
        It uses the other sources to find the best information it can about a
        film. It's main use to to combine the extra information film chapter
        information from the <literal>TagChimpSource</literal> source with the
        information in the <literal>XBMCSource</literal>.</para>

        <para>This source supports the following parameters: <itemizedlist>
            <listitem>
              <para><literal>xbmcSourceId</literal> Id of XBMC source to use,
              if parameter is not specified, then the default is used.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Stores</title>

      <para>Stores are similar too sources, except that they are also
      writable. Once information has been retrieved from a source, it is
      written info a store. Next time the information is needed, it can be
      retrieved from the store. This makes repeatedly retrieving information a
      lot faster.</para>

      <para>Stores can have parameters. These parameters are entered via the
      configuration file. The stores will validated their parameters when the
      store is access and report back any problems that are found.</para>

      <para>Thee following stores that come with &apptitle;. Each of these has
      different properties. Some of these stores can also be used by other
      applications such as media centre's to display media metadata.</para>

      <sect2>
        <title>org.stanwood.media.store.memory.MemoryStore</title>

        <para>This store is used to store the media information in memory.
        This allows the tool to reuse the media information without having to
        fetch it from other stores or sources (which would be slower). This
        information will be lost once the application exits.</para>
      </sect2>

      <sect2 id="DatabaseStore">
        <title>org.stanwood.media.store.db.DatabaseStore</title>

        <para>This is a store used to store TV show and film information in a
        database. The database can be remote or local. This store is also used
        when searching for media detials. The database connection details
        should be specified in the <xref linkend="resources"/> section of the
        configuration.</para>

        <para>The store needs a empty database to be created and the user
        specified in the resource must have access to it. Upon first
        connection, the store will create the database tables.</para>

        <example>
          <title>Local MySQL database setup</title>

          <para>The following commands in the mysql console will setup the
          database when connecting locally.</para>

          <programlisting>mysql&gt; CREATE DATABASE mediamanager;
mysql&gt; GRANT ALL PRIVILEGES ON mediamanager.* TO 'mediamanager'@'localhost' IDENTIFIED BY 'password'
</programlisting>

          <para>Using the database created above, the following connfiguration
          would connect the store to the datbase:</para>

          <programlisting>&lt;mediaManager&gt;
  &lt;mediaDirectory directory="/media/films" mode="FILM"&gt;
    &lt;stores&gt;
      &lt;store id="org.stanwood.media.store.db.DatabaseStore"&gt;
        &lt;param name="resourceId" value="mainDB"/&gt;
      &lt;/store&gt;
    &lt;/stores&gt;
  &lt;/mediaDirectory&gt;
  &lt;resources&gt;
    &lt;databaseResource id="mainDB"&gt;
        &lt;url&gt;jdbc:mysql://localhost:3306/mediamanager&lt;/url&gt;
        &lt;dialect&gt;org.hibernate.dialect.MySQLDialect&lt;/dialect&gt;
        &lt;username&gt;mediamanager&lt;/username&gt;
        &lt;password&gt;password&lt;/password&gt;
    &lt;/databaseResources&gt;
  &lt;/resources
&lt;/mediaManager&gt;</programlisting>
        </example>

        <para>This store has the following parameters:</para>

        <itemizedlist>
          <listitem>
            <para>resourceId - The ID of the resource that specifies the
            connection information. This is a required paramter.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="FileDatabaseStore">
        <title>org.stanwood.media.store.db.FileDatabaseStore</title>

        <para>This is a store used to store TV show and film information in a
        database file. File file is stored withing the &apptitle;
        configuration directory. This store is also used when searching for
        media detials. This is the default store when no stores are specified
        for a media directory.</para>

        <para>This store has no parameters</para>
      </sect2>

      <sect2 id="XMLStore2">
        <title>org.stanwood.media.store.xmlstore.XMLStore2</title>

        <para>This store is used to store the TV show and film information in
        a XML file called '.mediaManager-xmlStore.xml'. This file will be
        locationed in the root of the media directory and can store multiple
        films/tv shows. This store can also be used when searching for tv show
        and film ID's.</para>
      </sect2>

      <sect2>
        <title>org.stanwood.media.store.SapphireStore</title>

        <para>This is a write only store that is used to store information in
        a format that can be used by the <ulink
        url="http://appletv.nanopi.net/">Sapphire</ulink> frontrow plugin. The
        details of the XML format can be found <ulink
        url="http://appletv.nanopi.net/manual/overriding-metadata/">here</ulink>.</para>

        <para>Every time episode or film information is fetched from a source,
        a XML file is written with the name name as the episode or film file
        (except the extension is changed too .xml).</para>

        <para>This store has the optional parameter
        "PreferredCertificationCounrty". If this is set, then when fetching
        the rating, this country in the parameter's rating is used. If the
        paramter is not set or the country can't be found, then the first
        rating is used.</para>

        <para>It has the following parameters: <itemizedlist>
            <listitem>
              <para><literal>PreferredCertificationCounrty</literal> The
              preferred counties rating to use.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2 id="MP4ITunesStore">
        <title>org.stanwood.media.store.mp4.MP4ITunesStore</title>

        <para>This store is used to store Film/TV show information in
        .mp4/.m4v files used by iTunes. This allows iTunes to use the meta
        data and see the files complete with their meta data.</para>

        <para>In order to function, this store uses the command line tools
        provided by the AtomicParsley application. Their are different forks
        of this application on the Internet. The most feature rich version
        I've found is at <ulink
        url="https://bitbucket.org/shield007/atomicparsley">AtomicParsley</ulink>.
        &apptitle; uses this one to add atoms that some of the other versions
        can't. The application must be installed on the PATH, or pointed to by
        the optional store parameters.</para>

        <para>&apptitle; should be able to find these tools if it was
        installed using the installer. However if it was installed via linux
        packages then it will look for them on the system path. It's also
        possible to tell it where to look for them. See the <xref
        linkend="native"/> chapter or the optional parameters of the store for
        more information.</para>

        <para>If using a version of AtomicParsley that does not support the
        setting of all fields that this store can handle, then a warning will
        be printed. A version with the above link that fully supports this
        store can downloaded from the &apptitle; website or installed via the
        installer.</para>

        <para>This store has following optional parameters: <itemizedlist>
            <listitem>
              <para><literal>atomicparsley</literal> The path to the
              AtomicParsley command</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
        <title>org.stanwood.media.store.mp4.itunes.RemoteMacOSXItunesStore</title>

        <para>This store is used to inform itunes of file changes in a media
        directory. It does this by talking to a remote server running on the
        same machine as iTunes. The details of the server can be found at
        <ulink
        url="http://code.google.com/p/itunes-remote-control-server/">iTunes
        Remote Server</ulink>.</para>

        <para>The optional parameter file-separator can be used when
        &apptitle; is running on a different operating system to the remote
        client. So for example if &apptitle; is on a linux OS and the remote
        server is on a windows OS, then the file seperator should be set to \.
        See the page <ulink
        url="http://en.wikipedia.org/wiki/Regular_expression">Regex</ulink>
        for more information on regular expression syntax.</para>

        <para>The search and replace optional parameters can be used to the
        media directory is access at a different location on the iTunes server
        machine to the machine that &apptitle; is running on.</para>

        <para>This store has following parameters: <itemizedlist>
            <listitem>
              <para><literal>hostname</literal> The path to the AtomicParsley
              command.</para>
            </listitem>

            <listitem>
              <para><literal>port</literal> Optional parameter giving port
              number of the server, defaults to 7000.</para>
            </listitem>

            <listitem>
              <para><literal>username</literal> Required parameter giving name
              of user used to log into the server.</para>
            </listitem>

            <listitem>
              <para><literal>password</literal> Required parameter giving
              password of user used to log into the server.</para>
            </listitem>

            <listitem>
              <para><literal>search-pattern</literal> Optional parameter that
              must be used with search-replace. This parameter is used to
              perform a regular expression search and replace on the file
              paths. This parameter is used to set the pattern.</para>
            </listitem>

            <listitem>
              <para><literal>search-replace</literal> Optional parameter that
              must be used with search-replace. This parameter is used to
              perform a regular expression search and replace on the file
              paths. This parameter is used to set the replacement
              text.</para>
            </listitem>

            <listitem>
              <para><literal>file-separator</literal> Optional parameter that
              is used to set the file seperator used in file names sent to the
              server.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Actions</title>

      <para>Actions are tasks that are to be performed upon media files by the
      application &mmmanager;. The following actions are provided:</para>

      <sect2>
        <title>org.stanwood.media.actions.command.ExecuteSystemCommandAction</title>

        <para>This action is used execute a system command upon media files
        and directories</para>

        <para>This action supports the following parameters, which are all
        optional: <itemizedlist>
            <listitem>
              <para><literal>commandOnFile</literal> A command to execute on
              finding acceptable media files.</para>
            </listitem>

            <listitem>
              <para><literal>commandOnDirectory</literal> A command to execute
              on finding acceptable directories within the media
              directory.</para>
            </listitem>

            <listitem>
              <para><literal>extensions</literal> A comma separated list of
              media file extensions to accept.</para>
            </listitem>

            <listitem>
              <para><literal>newFile</literal> If this command creates a new
              file, then the name should be in this parameter.</para>
            </listitem>

            <listitem>
              <para><literal>deletedFile</literal> If this command deletes a
              new file, then the name should be in this parameter.</para>
            </listitem>

            <listitem>
              <para><literal>abortIfFileExists</literal> The name of a file,
              that if it exists, then this action will not perform.</para>
            </listitem>
          </itemizedlist></para>

        <para>Parameters can also have variable in them. These can be any of
        the pattern variables, as well as the following special variables:
        <itemizedlist>
            <listitem>
              <para><literal>$NEWFILE</literal> The value of the 'newFile'
              parameter.</para>
            </listitem>

            <listitem>
              <para><literal>$DELETEDFILE</literal> The value of the
              'deletedFile' parameter.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE_NAME</literal> The name part of the
              current media file been processed. So after the last file
              seperator, until it finds the extension.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE_EXT</literal> The extension of the
              current media file been processed.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE_DIR</literal> The directory the
              current media file is in.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE</literal> The full path of the current
              media file.</para>
            </listitem>

            <listitem>
              <para><literal>$HOME</literal> The current users home
              directory.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
        <title>org.stanwood.media.actions.podcast.PodCastAction</title>

        <para>This action is used create a pod cast of media that it finds. It
        will add order the most recent media files by the date they were last
        modified.</para>

        <para>This action supports the following parameters: <itemizedlist>
            <listitem>
              <para><literal>mediaDirURL</literal> - This is a required
              parameter that specifies the URL used to find the root media
              directory.</para>
            </listitem>

            <listitem>
              <para><literal>fileLocation</literal> - This is a required
              parameter that specifies the location of the RSS feed relative
              to the root of the media directory. It can contain standard
              rename patterns with the value.</para>
            </listitem>

            <listitem>
              <para><literal>numberEntries</literal> - The maximum number of
              entries in the feed. The default if not set is unlimited.</para>
            </listitem>

            <listitem>
              <para><literal>extensions</literal> - A comma separated list of
              media file extensions to accept.</para>
            </listitem>

            <listitem>
              <para><literal>restrictPattern</literal> - This can be used to
              restrict the media files. It can contain standard rename
              patterns with the value.</para>
            </listitem>

            <listitem>
              <para><literal>feedTitle</literal> - Used to give a title to the
              RSS feed. It can contain standard rename patterns with the
              value.</para>
            </listitem>

            <listitem>
              <para><literal>feedDescription</literal> - Used to give a
              description to the RSS feed. It can contain standard rename
              patterns with the value.</para>
            </listitem>
          </itemizedlist></para>

        <para>Parameters can also have variable in them. These can be any of
        the following special variables: <itemizedlist>
            <listitem>
              <para><literal>$MEDIAFILE_NAME</literal> The name part of the
              current media file been processed. So after the last file
              seperator, until it finds the extension.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE_EXT</literal> The extension of the
              current media file been processed.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE_DIR</literal> The directory the
              current media file is in.</para>
            </listitem>

            <listitem>
              <para><literal>$MEDIAFILE</literal> The full path of the current
              media file.</para>
            </listitem>

            <listitem>
              <para><literal>$HOME</literal> The current users home
              directory.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2 id="renameaction">
        <title>org.stanwood.media.actions.rename.RenameAction</title>

        <para>This action is used to rename media files in a media directory
        based on a pattern found in the configuration file. The action can
        also move the file to different directory if the pattern has
        directories in it.</para>

        <para>This action supports the following parameters: <itemizedlist>
            <listitem>
              <para><literal>pruneEmptyFolders</literal> - If true, then after
              renaming, empty folders will be deleted.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="installation">
    <title>Installation</title>

    <para>Their are a few different ways to install &apptitle;. The different
    distributions can be found at <ulink
    url="http://code.google.com/p/tv-and-movies-meta-data-fetcher/downloads/list"><citetitle>Downloads</citetitle></ulink></para>

    <para>All of the distributions will require a Java 1.6 compatible
    JRE.</para>

    <sect1>
      <title>1. Linux Binary Distribution Packages</title>

      <para>Their are several linux distribution packages that can be found in
      the downloads section of the website. If your distribution uses RPM
      packages, then following these instructions. <orderedlist>
          <listitem>
            <para>Pick the packages for your distribution</para>
          </listitem>

          <listitem>
            <para>Download them to a directory</para>
          </listitem>

          <listitem>
            <para>Change to that directory from the console</para>
          </listitem>

          <listitem>
            <para>Log in as root and run the command <command>rpm -Uvh
            *.rpm</command></para>
          </listitem>
        </orderedlist></para>

      <para>This will install the the application and a scripts too launch
      it.</para>
    </sect1>

    <sect1>
      <title>2. Installer</title>

      <para>Their is a generic java installer that will run on any platform.
      Execute the following command upon the installer jar file to start the
      installer: <cmdsynopsis>
          <command>java -jar &apptitle;-&version;-install.jar</command>

          <arg>options</arg>
        </cmdsynopsis> This will prompt you for the location to install the
      application and create start menu links to the documentation.</para>

      <para>Their are also platform specific installers that can be launched
      easier on some platforms. Here are the names of the installers and the
      platforms they run on: <itemizedlist>
          <listitem>
            <para><literal>&apptitle;-&version;-install.sh</literal> - Linux
            installer</para>
          </listitem>

          <listitem>
            <para><literal>&apptitle;-&version;-install.windows.zip</literal>
            - Windows installer</para>
          </listitem>

          <listitem>
            <para><literal>&apptitle;-&version;-install.jar</literal> - Any
            Platform installer (including Mac OSX)</para>
          </listitem>
        </itemizedlist></para>

      <para>More installation guides can be found on the <ulink
      url="http://code.google.com/p/tv-and-movies-meta-data-fetcher/w/list">&apptitle;
      Wiki</ulink></para>
    </sect1>
  </chapter>

  <chapter id="usage">
    <title>CLI Usage</title>

    <para/>

    <sect1 id="mediamanagercmd">
      <title id="mediamanagercmd.title">&mmmanager;</title>

      <para>The &mmmanager; command is used to managed a media directory. It
      reads the configuration file to work out which sources, stores and
      actions are to be used with media directory. Then the actions are
      performed on the media directory. <cmdsynopsis>
          <command>&mmmanager;</command>

          <arg>-v</arg>

          <arg>-h</arg>

          <arg>-c <replaceable>config file</replaceable></arg>

          <arg>-l <replaceable>INFO|DEBUG|log4j configuration
          file</replaceable></arg>

          <arg>-d <replaceable>media directory</replaceable></arg>

          <arg>-t</arg>

          <arg>-u</arg>
        </cmdsynopsis></para>

      <para>The command has the following options: <itemizedlist>
          <listitem>
            <para><literal>-v, --version</literal> Display the version</para>
          </listitem>

          <listitem>
            <para><literal>-h, --help</literal> Show the help message</para>
          </listitem>

          <listitem>
            <para><literal>-d, --dir</literal> A requried option give the
            location of the media directory to manage</para>
          </listitem>

          <listitem>
            <para><literal>-c, --config_file</literal> The location of the
            config file. If option is not given then it will load from default
            locations.</para>
          </listitem>

          <listitem>
            <para><literal>-l, --log_config</literal> The log configuration
            mode. Either INFO, or DEBUG for the built in configurations, or a
            file name of a log4j configuration file.</para>
          </listitem>

          <listitem>
            <para><literal>-t, --test</literal> Enable test mode that cause no
            changes to be written to the filesystem.</para>
          </listitem>

          <listitem>
            <para><literal>-u, --noupdate</literal> If option is given, the
            XBMC addon scrapers are not updated.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="mediacopystore">
      <title id="mediacopystore.title">&mmcopystore;</title>

      <para>The &mmcopystore; command is used to move media files into a
      directory. It then uses the sources and stores with the media file and
      performs the actions on it. The media files can be either files or
      directories. <cmdsynopsis>
          <command>&mmcopystore;</command>

          <arg>-v</arg>

          <arg>-h</arg>

          <arg>-c <replaceable>config file</replaceable></arg>

          <arg>-l <replaceable>INFO|DEBUG|log4j configuration
          file</replaceable></arg>

          <arg>-d <replaceable>media directory</replaceable></arg>

          <arg>-t</arg>

          <arg>-u</arg>

          <arg>&lt;media file/directory...&gt;</arg>
        </cmdsynopsis></para>

      <para>The command has the following options: <itemizedlist>
          <listitem>
            <para><literal>-v, --version</literal> Display the version</para>
          </listitem>

          <listitem>
            <para><literal>-h, --help</literal> Show the help message</para>
          </listitem>

          <listitem>
            <para><literal>-d, --dir</literal> A requried option give the
            location of the media directory to manage</para>
          </listitem>

          <listitem>
            <para><literal>-c, --config_file</literal> The location of the
            config file. If option is not given then it will load from default
            locations.</para>
          </listitem>

          <listitem>
            <para><literal>-l, --log_config</literal> The log configuration
            mode. Either INFO, or DEBUG for the built in configurations, or a
            file name of a log4j configuration file.</para>
          </listitem>

          <listitem>
            <para><literal>-t, --test</literal> Enable test mode that cause no
            changes to be written to the filesystem.</para>
          </listitem>

          <listitem>
            <para><literal>-u, --noupdate</literal> If option is given, the
            XBMC addon scrapers are not updated.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="mediamovecmd">
      <title id="mediamovecmd.title">&mmmovemedia;</title>

      <para>The &mmmovemedia; command is used to move media files into a
      directory. It then uses the sources and stores with the media file and
      performs the actions on it. The media files can be either files or
      directories. <cmdsynopsis>
          <command>&mmmovemedia;</command>

          <arg>-v</arg>

          <arg>-h</arg>

          <arg>-c <replaceable>config file</replaceable></arg>

          <arg>-l <replaceable>INFO|DEBUG|log4j configuration
          file</replaceable></arg>

          <arg>-d <replaceable>media directory</replaceable></arg>

          <arg>-t</arg>

          <arg>-u</arg>

          <arg>&lt;media file/directory...&gt;</arg>
        </cmdsynopsis></para>

      <para>The command has the following options: <itemizedlist>
          <listitem>
            <para><literal>-v, --version</literal> Display the version</para>
          </listitem>

          <listitem>
            <para><literal>-h, --help</literal> Show the help message</para>
          </listitem>

          <listitem>
            <para><literal>-d, --dir</literal> A requried option give the
            location of the media directory to manage</para>
          </listitem>

          <listitem>
            <para><literal>-c, --config_file</literal> The location of the
            config file. If option is not given then it will load from default
            locations.</para>
          </listitem>

          <listitem>
            <para><literal>-l, --log_config</literal> The log configuration
            mode. Either INFO, or DEBUG for the built in configurations, or a
            file name of a log4j configuration file.</para>
          </listitem>

          <listitem>
            <para><literal>-t, --test</literal> Enable test mode that cause no
            changes to be written to the filesystem.</para>
          </listitem>

          <listitem>
            <para><literal>-u, --noupdate</literal> If option is given, the
            XBMC addon scrapers are not updated.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="mp4listatomscmd">
      <title id="mp4listatomscmd.title">&mmlistatoms;</title>

      <para>The &mmlistatoms; command is used to list the Apple atoms in a
      MP4/M4V media file which is given as a argument. It can be used to check
      the metadata that iTunes will see. <cmdsynopsis>
          <command>&mmlistatoms;</command>

          <arg>-v</arg>

          <arg>-h</arg>

          <arg>-c <replaceable>config file</replaceable></arg>

          <arg>-l <replaceable>INFO|DEBUG|log4j configuration
          file</replaceable></arg>

          <arg>&lt;media file&gt;</arg>
        </cmdsynopsis></para>

      <para>The command has the following options: <itemizedlist>
          <listitem>
            <para><literal>-v, --version</literal> Display the version</para>
          </listitem>

          <listitem>
            <para><literal>-h, --help</literal> Show the help message</para>
          </listitem>

          <listitem>
            <para><literal>-c, --config_file</literal> The location of the
            config file. If option is not given then it will load from default
            locations.</para>
          </listitem>

          <listitem>
            <para><literal>-l, --log_config</literal> The log configuration
            mode. Either INFO, or DEBUG for the built in configurations, or a
            file name of a log4j configuration file.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title id="mmxbmccmd.title">&mmxbmc;</title>

      <para>The &mmxbmc; command is used to manage XBMC addons. It has the sub
      commands and arguments listed below.</para>

      <para><literal>usage: mm-xbmc [--global-options] &lt;command&gt;
      [--command-options] [arguments]</literal></para>

      <sect2>
        <title>Global options:</title>

        <para><itemizedlist>
            <listitem>
              <para><literal>-v, --version</literal> Display the
              version</para>
            </listitem>

            <listitem>
              <para><literal>-h, --help</literal> Show the help message</para>
            </listitem>

            <listitem>
              <para><literal>-c, --config_file</literal> The location of the
              config file. If option is not given then it will load from
              default locations.</para>
            </listitem>

            <listitem>
              <para><literal>-l, --log_config</literal> The log configuration
              mode. Either INFO, or DEBUG for the built in configurations, or
              a file name of a log4j configuration file.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
        <title>Commands:</title>

        <para><itemizedlist>
            <listitem>
              <para><literal>list</literal> - Lists the installed XBMC
              addons</para>
            </listitem>

            <listitem>
              <para><literal>update</literal> - Update the installed XBMC
              addons to the latest versions</para>
            </listitem>

            <listitem>
              <para><literal>install</literal> - Install a new XBMC
              addon</para>
            </listitem>

            <listitem>
              <para><literal>remove</literal> - Install a new XBMC
              addon</para>
            </listitem>
          </itemizedlist></para>
      </sect2>
    </sect1>

    <sect1>
      <title id="mmprintdbschema.title">&mmprintdbschema;</title>

      <para>The &mmprintdbschema; command is used to print the database schema
      for creating an intital database. A hibernate dialect must be passed to
      it, see <xref linkend="hibernateDialects"/> for more information on
      dialects.</para>

      <cmdsynopsis>
        <command>&mmprintdbschema;</command>

        <arg>-v</arg>

        <arg>-h</arg>

        <arg>-d <replaceable>dialect</replaceable></arg>

        <arg>-c <replaceable>config file</replaceable></arg>

        <arg>-l <replaceable>INFO|DEBUG|log4j configuration
        file</replaceable></arg>
      </cmdsynopsis>

      <para>The command has the following options: <itemizedlist>
          <listitem>
            <para><literal>-v, --version</literal> Display the version</para>
          </listitem>

          <listitem>
            <para><literal>-h, --help</literal> Show the help message</para>
          </listitem>

          <listitem>
            <para><literal>-c, --config_file</literal> The location of the
            config file. If option is not given then it will load from default
            locations.</para>
          </listitem>

          <listitem>
            <para><literal>-l, --log_config</literal> The log configuration
            mode. Either INFO, or DEBUG for the built in configurations, or a
            file name of a log4j configuration file.</para>
          </listitem>

          <listitem>
            <para><literal>-d, --dialect</literal> The database
            dialect.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title id="mmimportmedia.title">&mmimportmedia;</title>

      <para>The &mmimportmedia; command is used to check for new media in
      watched directories. If it find media, it attempts to lookup the
      information for the files and move them to the correct media directory.
      See <xref linkend="watcheddirectory"/> for configuration details.
      <cmdsynopsis>
          <command>&mmimportmedia;</command>

          <arg>-v</arg>

          <arg>-h</arg>

          <arg>-a</arg>

          <arg>-d</arg>

          <arg>-e</arg>

          <arg>-t</arg>

          <arg>-u</arg>

          <arg>-c <replaceable>config file</replaceable></arg>

          <arg>-l <replaceable>INFO|DEBUG|log4j configuration
          file</replaceable></arg>
        </cmdsynopsis></para>

      <para>The command has the following options: <itemizedlist>
          <listitem>
            <para><literal>-v, --version</literal> Display the version</para>
          </listitem>

          <listitem>
            <para><literal>-h, --help</literal> Show the help message</para>
          </listitem>

          <listitem>
            <para><literal>-c, --config_file</literal> The location of the
            config file. If option is not given then it will load from default
            locations.</para>
          </listitem>

          <listitem>
            <para><literal>-l, --log_config</literal> The log configuration
            mode. Either INFO, or DEBUG for the built in configurations, or a
            file name of a log4j configuration file.</para>
          </listitem>

          <listitem>
            <para><literal>--dontUseDefaults, -d</literal> Don't use default
            media directories.</para>
          </listitem>

          <listitem>
            <para><literal>--noupdate, -u</literal> If this option is present,
            then the XBMC addons won''t be updated</para>
          </listitem>

          <listitem>
            <para><literal>--deleteNonMedia, -e</literal> Delete files are
            that are not media files (use with care)</para>
          </listitem>

          <listitem>
            <para><literal>--test, -t</literal> If this option is present,
            then no changes are performed.</para>
          </listitem>

          <listitem>
            <para><literal>--actions, -a</literal> Execute actions on new
            media files</para>
          </listitem>
        </itemizedlist></para>
    </sect1>
  </chapter>

  <chapter id="configuration">
    <title>Configuration</title>

    <para/>

    <sect1>
      <title/>

      <para>The applications and the API make use of a XML configuration file.
      This stores information about the media directories and how they should
      be managed.</para>

      <para>The applications have CLI options that can be used too tell it
      which configuration file too use. If this option is not present, then it
      will look for the file at the location
      <filename>/etc/mediamanager-conf.xml</filename> and
      <filename>$HOME/.mediaManager/mediamanager-conf.xml</filename>. If these
      can't be found, then a default configuration file will be created at
      <filename>$HOME/.mediaManager/mediamanager-conf.xml</filename>.</para>
    </sect1>

    <sect1 id="mediadirectory">
      <title>Media directories</title>

      <para>&apptitle; is used to manage media in media directories, this
      means you need to tell it about the media directories. Their is a
      mediaDirectory entity in the configuration file used to do this. It has
      the following attributes: <itemizedlist>
          <listitem>
            <para><literal>directory</literal> - The location of the media
            directory.</para>
          </listitem>

          <listitem>
            <para><literal>mode</literal> - The type of media. . See <xref
            linkend="mode"/>.</para>
          </listitem>

          <listitem>
            <para><literal>pattern</literal> - The rename pattern. See <xref
            linkend="patterns"/>.</para>
          </listitem>

          <listitem>
            <para><literal>ignoreSeen</literal> - option attribute, if set to
            true then once a file is seen it will not be processed
            again</para>
          </listitem>
        </itemizedlist></para>

      <sect2 id="mode">
        <title>Mode</title>

        <para>Media directories can operate in different modes. This effects
        how the media is handled and which pattern tokens can be used. The
        currently supported modes are: <itemizedlist>
            <listitem>
              <para><literal>TV_SHOW</literal> - Media files are tv
              episodes</para>
            </listitem>

            <listitem>
              <para><literal>FILM</literal> - Media files are films</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2 id="patterns">
        <title>Patterns</title>

        <para>A pattern can be associated with a media directory. This is used
        by actions like the Renameaction to rename file media files and change
        the directory structure.</para>

        <para>The following list contains the meaning for each token:
        <itemizedlist>
            <listitem>
              <para><literal>%d</literal> - If HighDef, replaced with
              "HD"</para>
            </listitem>

            <listitem>
              <para><literal>%e</literal> - episode number</para>
            </listitem>

            <listitem>
              <para><literal>%f</literal> - last episode number of the episode contains multiple
              episodes</para>
            </listitem>

            <listitem>
              <para><literal>%h</literal> - show Id</para>
            </listitem>

            <listitem>
              <para><literal>%i</literal> - the show or film image URL</para>
            </listitem>

            <listitem>
              <para><literal>%n</literal> - show name</para>
            </listitem>

            <listitem>
              <para><literal>%p</literal> - part number</para>
            </listitem>

            <listitem>
              <para><literal>%s</literal> - season number</para>
            </listitem>

            <listitem>
              <para><literal>%t</literal> - episode title or film title</para>
            </listitem>

            <listitem>
              <para><literal>%u</literal> - the show or film short
              summary</para>
            </listitem>

            <listitem>
              <para><literal>%w</literal> - If Wide screen, replaced with
              "WS"</para>
            </listitem>

            <listitem>
              <para><literal>%x</literal> - extension (avi, mkv....)</para>
            </listitem>

            <listitem>
              <para><literal>%y</literal> - year</para>
            </listitem>

            <listitem>
              <para><literal>%%</literal> - add a % char</para>
            </listitem>
          </itemizedlist></para>

        <para>The patterns also support the syntax <literal>"{ Part %p
        }"</literal>. The braces means the contents inside are optional. So in
        this case if the media does not have a part number, then it would be
        added to the filename.</para>

        <example>
          <title>Examples:</title>

          <para>The following options show what happens when they are used to
          rename the 4th episode of the 2nd season of the show heroes.
          <itemizedlist>
              <listitem>
                <para>"S%s E%e - %t.%x" = "S2 E04 - The Kindness of
                Strangers.avi"</para>
              </listitem>

              <listitem>
                <para>"%sx%e.%n.%t.%x" = "2x04.Heroes.The Kindness of
                Strangers.avi"</para>
              </listitem>

              <listitem>
                <para>"%sx%e.%h.%t.%x" = "2x04.17552.The Kindness of
                Strangers.avi"</para>
              </listitem>
            </itemizedlist></para>
        </example>
      </sect2>
    </sect1>

    <sect1 id="watcheddirectory">
      <title>Watch Directories</title>

      <para>&apptitle; is able to monitor file system directories for new
      media. When it finds it, it can be processed and moved into media
      directories. Use the command <xref linkend="mmimportmedia.title"/> to
      check for new media. The following example shows how to setup a file
      system directory for monitoring. <example>
          <title>Watch Directory</title>

          <programlisting>&lt;mediaManager&gt;
  &lt;watchDirectory directory="/mounts/newMedia"/&gt;
&lt;/mediaManager&gt;
</programlisting>
        </example></para>
    </sect1>

    <sect1 id="ignore">
      <title>Ignore Patterns</title>

      <para>@@name@@ can be configured to ignore media files that match a
      regular expressions. The following example shows how to configure ignore
      patterns that cause files to be not be processed. <example>
          <title>Ignore patterns</title>

          <programlisting>&lt;mediaManager&gt;
  &lt;mediaDirectory directory="/media/films" mode="FILM" pattern="%t{ Part %p}.%x"&gt;
    &lt;ignore&gt;.*[S|s]amples.*&lt;/ignore&gt;
    &lt;ignore&gt;.*temp.*&lt;/ignore&gt;
  &lt;/mediaDirectory&gt;
&lt;/mediaManager&gt;
</programlisting>
        </example></para>
    </sect1>

    <sect1>
      <title>Strip patterns</title>

      <para>Quite offten before a media file is renamed, it can contain tokens
      to indercate where it came from and the type of media. @@name@@ makes
      use of these when looking up the media information and has a default
      list of know strip patterns. It's possible to configure different stip
      patterns for each media directory which will override the default
      patterens in use. The patterens are regualar expressions.</para>

      <example>
        <title>Strip patterns</title>

        <programlisting>&lt;mediaManager&gt;
  &lt;mediaDirectory directory="/media/films" mode="FILM" pattern="%t{ Part %p}.%x"&gt;
    &lt;strip&gt;blueray&lt;/strip&gt;
    &lt;strip&gt;xvid&lt;/strip&gt;
    &lt;strip&gt;dvd(\d+)&lt;/strip&gt;
  &lt;/mediaDirectory&gt;
&lt;/mediaManager&gt;</programlisting>
      </example>
    </sect1>

    <sect1 id="plugins">
      <title>Plugins</title>

      <para>It is possible to extend &apptitle; with plugins. Plugins are
      capable of adding new Sources, Stores and Actions. Plugins must extend
      the correct interfaces like the internal Sources, Stores and Actions.
      They must then be packaged into a .jar file and imported into
      MediaManager. The following example shows the configuration file entries
      needed to tell &apptitle; about a plugin. <example>
          <title>Registering plguins</title>

          <programlisting>&lt;mediaManager&gt;
  &lt;plugins&gt;
    &lt;plugin jar="$HOME/.mediaManager/plguins/myplugin.jar" class="com.mm.plugins.MyPlugin"/&gt;
  &lt;/plugins&gt;
&lt;/mediaManager&gt;
</programlisting>
        </example></para>
    </sect1>

    <sect1 id="native">
      <title>Native applications and libraries</title>

      <para>Some parts of &apptitle; depend on native applications/libraries
      to function. Usally &apptitle; runs on any platform that supports Java
      1.6. However these parts need native applcations, so they must either be
      installed on the system or &apptitle; must be told how to find them. If
      they can't be found, then parts of &apptitle; that use then will be
      disabled.</para>

      <para>If &apptitle; was installed via the installer, then the native
      folder will have been installed already and it should find then. If
      installing from a linux package, then their is a chance that native
      applications and libraries won't be found. &apptitle; will fist look for
      them in a folder pointed to by configuration, then an envoriment
      varaible MM_NATIVE_DIR and lastly on the system path.</para>

      <para>If they are not install, then they can be downloaded from the
      media manager website at <ulink
      url="http://code.google.com/p/tv-and-movies-meta-data-fetcher/downloads/detail?name=@@name@@-@@version@@-native.zip&amp;can=2&amp;q=">http://code.google.com/p/tv-and-movies-meta-data-fetcher/downloads/detail?name=&apptitle;-&version;-native.zip&amp;can=2&amp;q=</ulink>.
      The native folder should be unzipped from the downloaded file and
      pointed to by the configuration. See the section <xref
      linkend="nativesetting"/>.</para>
    </sect1>

    <sect1 id="globalsettings">
      <title>Global Settings</title>

      <para>Their are some global settings which can be configured. Belowe is
      a list of settings: <itemizedlist>
          <listitem>
            <para>configDirectory - The location of the local configuration
            directory</para>
          </listitem>

          <listitem>
            <para>native - A directory which contains the native
            applications/libraries used by &apptitle;</para>
          </listitem>
        </itemizedlist></para>

      <para id="nativesetting">The native setting is used to specify the
      location of a directory containg the native applications and libraries
      that &apptitle; depends on. See the <xref linkend="native"/> section for
      mare information.</para>

      <para><example>
          <title>Gloab settings</title>

          <programlisting>&lt;mediaManager&gt;
  &lt;global&gt;
    &lt;configDirectory&gt;$HOME/.mediaManager&lt;/configDirectory&gt;
    &lt;native&gt;$HOME/.mediaManager/native&lt;/native&gt;
  &lt;/global&gt;
&lt;/mediaManager&gt;
</programlisting>
        </example></para>
    </sect1>

    <sect1 id="resources">
      <title>Resources</title>

      <para>Resources can be configured in the resources section of the
      database. Resource information describes connection information to
      systems resources such as a database. The database resource as the
      following options:</para>

      <itemizedlist>
        <listitem>
          <para>id - Used to identify the resource to other parts of the
          configuration.</para>
        </listitem>

        <listitem>
          <para>url - The JDBC url to the database. The url syntax depends on
          the database been connected to, but typical contains the hostname
          and database name.</para>
        </listitem>

        <listitem id="hibernateDialects">
          <para>dialect - The is the SQL dilect that the hibernate database
          library should use. Belowe are some examples:</para>

          <itemizedlist>
            <listitem>
              <para>MySQL - org.hibernate.dialect.MySQLDialect</para>
            </listitem>

            <listitem>
              <para>HSQLDB - org.hibernate.dialect.HSQLDialect</para>
            </listitem>

            <listitem>
              <para>PostgreSQL -
              org.hibernate.dialect.PostgreSQLDialect</para>
            </listitem>

            <listitem>
              <para>Microsoft SQL Server -
              org.hibernate.dialect.SQLServerDialect</para>
            </listitem>

            <listitem>
              <para>Oracle - org.hibernate.dialect.OracleDialect</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>username - The name of the user used to access the
          database</para>
        </listitem>

        <listitem>
          <para>password - The password of the user used to access the
          database</para>
        </listitem>

        <listitem>
          <para>schemaCheck - Optional paramter that controls how the database
          schema should be checked when connecting to the database. Possible
          values are "validate" and "none". This defaults to validate which
          causes the database schema to be validated. On some database
          connections, the validation reports problems when their are none. So
          setting this parameter to none, will cause no schema checks to be
          done.</para>
        </listitem>
      </itemizedlist>

      <example>
        <title>MYSQL database resource</title>

        <programlisting>&lt;mediaManager&gt;
  &lt;resources&gt;
    &lt;databaseResource id="mainDB"&gt;
        &lt;url&gt;jdbc:mysql://localhost:3306/SampleDB&lt;/url&gt;
        &lt;dialect&gt;org.hibernate.dialect.MySQLDialect&lt;/dialect&gt;
        &lt;username&gt;dbuser&lt;/username&gt;
        &lt;password&gt;dbpassword&lt;/password&gt;
    &lt;/databaseResources&gt;
  &lt;/resources&gt;
&lt;/mediaManager&gt;
</programlisting>
      </example>

      <example>
        <title>PostgreSQL database resource</title>

        <para><programlisting>&lt;mediaManager&gt;
  &lt;resources&gt;
    &lt;databaseResource id="mainDB"&gt;
        &lt;url&gt;jdbc:postgresql://localhost/mydatabase&lt;/url&gt;
        &lt;dialect&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/dialect&gt;
        &lt;username&gt;dbuser&lt;/username&gt;
        &lt;password&gt;dbpassword&lt;/password&gt;
    &lt;/databaseResources&gt;
  &lt;/resources&gt;
&lt;/mediaManager&gt;
</programlisting></para>
      </example>
    </sect1>

    <sect1>
      <title>Seen Database</title>

      <para>The seen database is used to store a list of files that have been
      seen before. This also records the time the file was last modified so
      that if it's updated the changes will be noticed. Media directiores can
      be set to ignore seen media files. This seeds up the processing of media
      files. By default the seen database is stored in a file in the
      configuration directory. It's also possible to store the seen database
      in a actual database. To do this the resource to use with the seen
      database must be configured.</para>

      <example>
        <title>Storeing the seen database within a database resource</title>

        <para>This will set the seen database to use the database resource
        "mainDB".</para>

        <programlisting>&lt;mediaManager&gt;
  &lt;resources&gt;
    &lt;databaseResource id="mainDB"&gt;
        &lt;url&gt;jdbc:mysql://localhost:3306/SampleDB&lt;/url&gt;
        &lt;dialect&gt;org.hibernate.dialect.MySQLDialect&lt;/dialect&gt;
        &lt;username&gt;dbuser&lt;/username&gt;
        &lt;password&gt;dbpassword&lt;/password&gt;
    &lt;/databaseResources&gt;
  &lt;/resources&gt;
  &lt;seenDatabase resourceId="mainDB"/&gt;
&lt;/mediaManager&gt;</programlisting>
      </example>
    </sect1>

    <sect1 id="examples">
      <title>Examples</title>

      <para><example>
          <title>Default Configuration file</title>

          <para>This configuration file shows the required options needed to
          configure a media directory. It uses default sources, stores and
          actions. Here is what is used by default with a media
          directory:</para>

          <itemizedlist>
            <listitem>
              <para>source - <xref linkend="XBMCSource"/></para>
            </listitem>

            <listitem>
              <para>stores - <xref linkend="FileDatabaseStore"/>, <xref
              linkend="MP4ITunesStore"/></para>
            </listitem>

            <listitem>
              <para>actions - <xref linkend="renameaction"/></para>
            </listitem>
          </itemizedlist>

          <para>The default stores, sources and actions will ensure that the
          latest meta data is downloaded for the media directory and that the
          files are renamed according to their metadata. If the file is a
          m4v/mp4 file, then meta data is inserted into the file.</para>

          <programlisting>&lt;!-- A configuration file that uses defualt sources, stores and actions --&gt;
&lt;mediaManager&gt;
  &lt;!-- Example Film media directory --&gt;
  &lt;mediaDirectory directory="/media/films" mode="FILM" pattern="%t{ (%y)}{ Part %p}.%x" ignoreSeen="true"&gt;
  &lt;/mediaDirectory&gt;

  &lt;!-- Example TV show media directory --&gt;
  &lt;mediaDirectory directory="/media/TV" mode="TV_SHOW" pattern="%n/Season %s/%sx%e - %t.%x"&gt;
  &lt;/mediaDirectory&gt;
 
&lt;/mediaManager&gt;</programlisting>
        </example><example>
          <title>A more complex configuration file</title>

          <programlisting>&lt;mediaManager&gt;
  &lt;global&gt;
    &lt;!-- Used to define the location where configuration settings are stored --&gt;
    &lt;configDirectory&gt;$HOME/.mediaManager&lt;/configDirectory&gt;
  &lt;/global&gt;

  &lt;!-- Example Film media directory --&gt;
  &lt;mediaDirectory directory="/media/films" mode="FILM" pattern="%t{ (%y)}{ Part %p}.%x" ignoreSeen="true"&gt;
    &lt;!-- The default extensions have been overriden for this directory so that the media manager
         will only consider .avi and .m4v files as media files. --&gt;
    &lt;extensions&gt;
      &lt;extension&gt;avi&lt;/extension&gt;
      &lt;extension&gt;m4v&lt;/extension&gt;
    &lt;/extensions&gt;
    &lt;sources&gt;
      &lt;source id="org.stanwood.media.source.xbmc.XBMCSource"/&gt;
    &lt;/sources&gt;
    &lt;stores&gt;
      &lt;!-- Update MP4 files with meta data --&gt;
      &lt;store id="org.stanwood.media.store.mp4.MP4ITunesStore"/&gt;
        &lt;!-- Cache film info in a XML Store --&gt;
        &lt;store id="org.stanwood.media.store.xmlstore.XMLStore2"/&gt;
    &lt;/stores&gt;
    &lt;actions&gt;
      &lt;!-- Make sure files and directories have the correct owner. Only works on a unix system,
           when MediaManager is running as root. --&gt;
      &lt;action id="org.stanwood.media.actions.command.ExecuteSystemCommandAction"&gt;
        &lt;param name="commandOnFile" value="chown jp.users &amp;quot;$MEDIAFILE&amp;quot;"/&gt;
        &lt;param name="commandOnDirectory" value="chown jp.users &amp;quot;$MEDIAFILE&amp;quot;"/&gt;
      &lt;/action&gt;
            
      &lt;!-- Make sure files and directories have the correct permissions. Only works on a unix system,
           when MediaManager is running as root. --&gt;
      &lt;action id="org.stanwood.media.actions.command.ExecuteSystemCommandAction"&gt;
        &lt;param name="commandOnFile" value="chmod 660 &amp;quot;$MEDIAFILE&amp;quot;"/&gt;
        &lt;param name="commandOnDirectory" value="chmod 770 &amp;quot;$MEDIAFILE&amp;quot;"/&gt;
      &lt;/action&gt;
            
      &lt;!-- Give all the media the correct name based on the pattern --&gt;
      &lt;action id="org.stanwood.media.actions.rename.RenameAction"/&gt;	

      &lt;!-- Create a potcast of the newest films, using the default number of entries --&gt;
      &lt;action id="org.stanwood.media.actions.podcast.PodCastAction"&gt;
        &lt;param name="mediaDirURL" value="http://my.media.com/podcasts/Films"/&gt;
        &lt;param name="fileLocation" value="rss.xml"/&gt;
        &lt;param name="extensions" value="m4v"/&gt;
      &lt;/action&gt;	
            
      &lt;!-- Encode any .avi files into .m4v files using the HandBrakeCLI application --&gt;
      &lt;action id="org.stanwood.media.actions.command.ExecuteSystemCommandAction"&gt;
        &lt;param name="commandOnFile" value="/usr/bin/HandBrakeCLI -i &amp;quot;$MEDIAFILE&amp;quot; -o &amp;quot;$NEWFILE&amp;quot; preset=&amp;apos;AppleTV 2&amp;apos;"/&gt;
        &lt;param name="newFile" value="$MEDIAFILE_DIR/$MEDIAFILE_NAME.m4v"/&gt;
        &lt;param name="extensions" value="avi"/&gt;
        &lt;param name="abortIfFileExists" value="$NEWFILE"/&gt;
      &lt;/action&gt;
    &lt;/actions&gt;
  &lt;/mediaDirectory&gt;

  &lt;!-- Example TV show media directory --&gt;
  &lt;mediaDirectory directory="/media/TV" mode="TV_SHOW" pattern="%n/Season %s/%sx%e - %t.%x"&gt;
    &lt;sources&gt;
      &lt;source id="org.stanwood.media.source.xbmc.XBMCSource"&gt;
        &lt;param name="posters" value="true"/&gt;
      &lt;/source&gt;
    &lt;/sources&gt;
    &lt;stores&gt;
      &lt;store id="org.stanwood.media.store.xmlstore.XMLStore2"/&gt;
    &lt;/stores&gt;
    &lt;actions&gt;
      &lt;!-- Give all the media the correct name based on the pattern --&gt;
      &lt;action id="org.stanwood.media.actions.rename.RenameAction"/&gt;

      &lt;!-- Create per show RSS video podcasts that contain the most recent 5 show episodes --&gt;
      &lt;action id="org.stanwood.media.actions.podcast.PodCastAction"&gt;
        &lt;param name="mediaDirURL" value="http://my.media.com/podcasts/TV"/&gt;
        &lt;param name="numberEntries" value="5"/&gt;
        &lt;param name="fileLocation" value="%n/rss.xml"/&gt;
        &lt;param name="extensions" value="avi,mkv,mp4,m4v"/&gt;
        &lt;param name="feedDescription" value="%u"/&gt;
        &lt;param name="feedTitle" value="%n"/&gt;
      &lt;/action&gt;
    &lt;/actions&gt;
  &lt;/mediaDirectory&gt;

  &lt;!-- A media directory using the default stores and sources, but opting to have no actions
       performed on the media directory --&gt;
  &lt;mediaDirectory directory="/media/TV1" mode="TV_SHOW" pattern="%n/Season %s/%sx%e - %t.%x"&gt;
      &lt;actions/&gt;
  &lt;/mediaDirectory&gt;
 
  &lt;!-- Used to change the location and locale of the XBMC addons been used by the XBMC source --&gt;
  &lt;!--
     &lt;XBMCAddons directory="$HOME/.mediaManager/xbmc" locale="en"/&gt; 
   --&gt;
&lt;/mediaManager&gt;
</programlisting>
        </example></para>
    </sect1>
  </chapter>

  <chapter id="credits-and-licenses">
    <title>Credits and Licenses</title>

    <para>&apptitle;</para>

    <itemizedlist>
      <listitem>
        <para>John-Paul Stanford <email>dev@stanwood.org.uk</email> - Original
        Author</para>
      </listitem>
    </itemizedlist>

    <para>Documentation copyright &copyrightdate;, &copyholder;
    <email>dev@stanwood.org.uk</email></para>
  </chapter>
</book>
