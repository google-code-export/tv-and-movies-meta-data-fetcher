<project name="MediaManager" default="dist" basedir=".">

	<!-- Allow properties to be overridden by a property file -->
	<property file="build.properties" />

	<!-- Path properties -->
	<property name="src.dir" location="${basedir}/src" />
	<property name="build.dir" location="${basedir}/bin" />
	<property name="test.src.dir" location="${basedir}/tests" />
	<property name="test.build.dir" location="${basedir}/tests-bin" />
	<property name="dist.dir" location="${basedir}/dist" />
	<property name="libs.dir" location="${basedir}/libs" />
	<property name="etc.dir" location="${basedir}/etc" />
	<property name="rpm.dir" location="${basedir}/rpm" />
	<property name="docs.dir" location="${basedir}/docs"/>
	<property name="api.docs.dir" location="${docs.dir}/api" />
	<property name="userguide.dir" location="${docs.dir}/userguide" />	
	<property name="reports.dir" location="${basedir}/reports"/>
	<property name="docbook.home"    value="${basedir}/docbook/xsl"/>	
	<property name="fo.dir"          value="${basedir}/fo"/>
	<property name="scripts.dir" location="${basedir}/build/scripts"/>
	<property name="installer.dir" location="${basedir}/build/installer"/>
    
	<!-- Compiler properties -->
	<property name="javac.source" value="1.6" />
	<property name="javac.target" value="1.6" />

	<!-- Dist properties -->
	<property name="project.version" value="1.98" />
	<property name="project.author" value="John-Paul Stanford" />
	<property name="project.email" value="dev@stanwood.org.uk" />
	<property name="project.summary" value="A application for correcting the name of TV shows and films, using information from the internet."/>

	<!-- Lib classpaths -->
	<path id="installer.libs.classpath">
		<fileset dir="${libs.dir}/installer" includes="*.jar" />
	</path>
	<path id="run-time.libs.classpath">
		<fileset dir="${libs.dir}/run-time" includes="*.jar" />
	</path>
	<path id="compile-time.libs.classpath">
		<fileset dir="${libs.dir}/compile-time" includes="**/*.jar" />
	</path>
	<path id="test-time.libs.classpath">
		<fileset dir="${libs.dir}/test-time" includes="*.jar" />
	</path>
	
	<!-- Cobeture setup -->
	<property name="cobertura.dir" value="${basedir}/cobertura" />
	<property name="build.instrumented.dir" value="${cobertura.dir}/instrumented-classes"/>
	<taskdef classpathref="compile-time.libs.classpath" resource="tasks.properties" />
	
    <taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask">
		<classpath refid="installer.libs.classpath"/>
	</taskdef>

	<!-- Fop setup -->
  	<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">        
    	<classpath refid="compile-time.libs.classpath"/>	                    
  		<classpath refid="run-time.libs.classpath"/>
    </taskdef>
	
	<target name="antlr">				
		<java classname="org.antlr.Tool" fork="true" failonerror="true">	
			<classpath>				
				<path refid="run-time.libs.classpath"/>
				<path refid="compile-time.libs.classpath"/>	
			</classpath>
			<arg value="-fo"/>
			<arg value="${src.dir}/org/stanwood/media/source/xbmc/expression/"/>
			<arg value="${src.dir}/org/stanwood/media/source/xbmc/expression/ExpressionLexer.g"/>			
		</java>
		<java classname="org.antlr.Tool" fork="true" failonerror="true">	
			<classpath>				
				<path refid="run-time.libs.classpath"/>
				<path refid="compile-time.libs.classpath"/>	
			</classpath>
			<arg value="-fo"/>
			<arg value="${src.dir}/org/stanwood/media/source/xbmc/expression/"/>
			<arg value="${src.dir}/org/stanwood/media/source/xbmc/expression/ExpressionParser.g"/>			
		</java>
	</target>
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${test.build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${api.docs.dir}" />
		<mkdir dir="${reports.dir}"/>
	</target>

	<target name="compile" depends="init,antlr" description="compile the source ">
		<property name="cp" refid="run-time.libs.classpath" />
		<echo message="Classpath is ${cp}" />

		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" srcdir="${src.dir}" destdir="${build.dir}" target="${javac.target}" source="${javac.source}">
			<classpath>
				<path refid="run-time.libs.classpath" />				
			</classpath>
		</javac>

		<copy todir="${build.dir}">
			<fileset dir="${src.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="compile-tests" depends="compile" description="compile the tests">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" srcdir="${test.src.dir}" destdir="${test.build.dir}" target="${javac.target}" source="${javac.source}">
			<classpath>
				<pathelement location="${build.dir}" />
				<path refid="run-time.libs.classpath" />
				<path refid="test-time.libs.classpath" />                
			</classpath>
		</javac>

		<copy todir="${test.build.dir}">
			<fileset dir="${test.src.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="javadoc">
		<delete dir="${api.docs.dir}"/>
        <javadoc packagenames="org.stanwood.*"
            sourcepath="${src.dir}"                
            defaultexcludes="yes"
            destdir="${api.docs.dir}"
            author="true"
            version="true"
            use="true"
            windowtitle="Media Renamer/Metadata Fetcher">
        	<classpath>        		
        		<path refid="run-time.libs.classpath"/>
				<path refid="compile-time.libs.classpath"/>
        	</classpath>
          <doctitle><![CDATA[<h1>Media Renamer/Metadata Fetcher</h1>]]></doctitle>
        </javadoc>
	</target>

	<target name="run-tests" depends="compile,compile-tests">
		<delete dir="${cobertura.dir}"/>
		<mkdir dir="${cobertura.dir}"/>
		<mkdir dir="${reports.dir}/xml"/>
		<mkdir dir="${reports.dir}/coverage"/>
		<mkdir dir="${reports.dir}/junit"/>
		<cobertura-instrument todir="${build.instrumented.dir}">
		    <fileset dir="${build.dir}">
		        <include name="**/*.class"/>
		    </fileset>
		</cobertura-instrument>		
		
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
			<!--
					Specify the name of the coverage data file to use.
					The value specified below is the default.
				-->
		    <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
			
		    <classpath location="${build.instrumented.dir}"/>
		    <classpath location="${build.dir}"/>
			<classpath location="${test.build.dir}"/>
			<classpath refid="compile-time.libs.classpath"/>
			<classpath refid="run-time.libs.classpath"/>
			<classpath refid="test-time.libs.classpath"/>
		    
			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.dir}/xml" if="testcase" />
			<batchtest todir="${reports.dir}/xml" unless="testcase">
				<fileset dir="${test.src.dir}">
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit>
		
		<junitreport todir="${reports.dir}/xml" >
			
			<fileset dir="${reports.dir}/xml">
				<include name="TEST-*.xml"/>
			</fileset>		  
   			<report format="frames" todir="${reports.dir}/junit"/>
		</junitreport>
					
		<cobertura-report srcdir="${src.dir}" destdir="${reports.dir}/coverage"/>		
		
		<fail if="test.failed"/>
		
		<!--
		<cobertura-check branchrate="67" linerate="82"/>		
		-->		
		
		<delete dir="${reports.dir}/xml"/>
		<delete dir="${cobertura.dir}"/>
		<delete file="cobertura.ser" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete includeemptydirs="true" >
			<fileset dir="${build.dir}" includes="**/*"/>
			<fileset dir="${test.build.dir}" includes="**/*"/>
		</delete>
		<delete dir="${dist.dir}" />
		<delete dir="${api.docs.dir}" />
		<delete dir="${rpm.dir}" />
		<delete dir="${cobertura.dir}"/>
		<delete dir="${reports.dir}"/>
		<delete file="cobertura.ser" />
		<delete dir="${fo.dir}"/>
		<delete dir="${basedir}/docbook"/>
	</target>

	<target name="jars" description="generate the distribution">
		<echo message="${ant.project.name} ${project.version}" file="${basedir}/VERSION" />

		<jar jarfile="${dist.dir}/${ant.project.name}-${project.version}-src.jar" compress="true">
			<fileset dir="${src.dir}" />
			<fileset dir="${test.src.dir}" />			
		</jar>
		
		<zip zipfile="${dist.dir}/${ant.project.name}-${project.version}-src.zip" compress="true">
			<zipfileset dir="${src.dir}" prefix="${ant.project.name}-${project.version}/src">
				<exclude name="**/ExpressionParser.java"/>
				<exclude name="**/ExpressionLexer.java"/>
			</zipfileset>
			<zipfileset dir="${test.src.dir}" prefix="${ant.project.name}-${project.version}/tests"/>
			<zipfileset dir="${etc.dir}" prefix="${ant.project.name}-${project.version}/etc"/>			
			<zipfileset dir="${docs.dir}" prefix="${ant.project.name}-${project.version}/docs" includes ="**/*.xml"/>
			<zipfileset dir="${basedir}/build" prefix="${ant.project.name}-${project.version}/build"/>
			<zipfileset file="${basedir}/TODO" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/VERSION" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/COPYING" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/Changelog" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/Description" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/.project" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/.classpath" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/opensuse-build.xml" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/opensuse-11.4-build.xml" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/one-jar-ant-task.xml" prefix="${ant.project.name}-${project.version}"/>
			<zipfileset file="${basedir}/docbook.zip" prefix="${ant.project.name}-${project.version}"/>
		</zip>
		
		<zip zipfile="${dist.dir}/${ant.project.name}-${project.version}-apidocs.zip" basedir="${api.docs.dir}/.." compress="true" />

		<mkdir dir="${dist.dir}/bin/${ant.project.name}-${project.version}" />		
		
		<jar jarfile="${dist.dir}/${ant.project.name}-${project.version}.jar" basedir="${build.dir}" compress="true"/>
		<copy todir="${dist.dir}/bin/${ant.project.name}-${project.version}">
			<fileset file="${dist.dir}/${ant.project.name}-${project.version}.jar" />
		</copy>		
		
		<copy todir="${dist.dir}/bin/${ant.project.name}-${project.version}">
			<fileset file="${basedir}/VERSION" />
			<fileset file="${basedir}/COPYING" />
			<fileset file="${scripts.dir}/**" />						
		</copy>		
		<copy file="${etc.dir}/defaultConfig.xml" tofile="${dist.dir}/bin/${ant.project.name}-${project.version}/mediafetcher-conf.xml"/>

		<zip file="${dist.dir}/${ant.project.name}-${project.version}-bin.zip" basedir="${dist.dir}/bin" compress="true"/>

		<delete dir="${dist.dir}/bin" />						
	</target>

	<!-- 
			http://wiki.wsmoak.net/cgi-bin/wiki.pl?DocBookToPDF
		-->					
	<target name="docs" description="Converts docbook xml into pdf" >
		<delete dir="${basedir}/docbook"/>		
		<mkdir dir="${basedir}/docbook"/>
		<mkdir dir="${userguide.dir}/html"/>
		
		<unzip src="docbook.zip" dest="${basedir}/docbook"/>
		
	    <xslt  style="${docbook.home}/fo/docbook.xsl"	         	     	
	            basedir="${userguide.dir}/xml"
	            extension=".fo"
	            destdir="${fo.dir}" />
				
		<xslt  style="${docbook.home}/html/docbook.xsl"	         	     	
			            basedir="${userguide.dir}/xml"
			            extension=".html"
			            destdir="${userguide.dir}/html" />	
		
		
		<fop format="application/pdf" 
			 fofile="${fo.dir}/docbook.fo" 
			 outfile="${userguide.dir}/userguide.pdf" />
		
		<delete dir="${fo.dir}"/>
		<delete dir="${basedir}/docbook"/>
	</target>
		
	<target name="installer" depends="jars">		
		<!-- Create java installer -->		
		<izpack input="${basedir}/build/installer/install.xml"
			    output="${dist.dir}/${ant.project.name}-${project.version}-install.jar"
				installerType="standard"
				inheritAll="true"
				basedir="${basedir}/build/installer"
				compression="deflate"
				compressionlevel="9"/>
		
		<!-- Create Linux Shell Installer -->
		<tar destfile="${dist.dir}/${ant.project.name}-${project.version}-install.tar">
			<tarfileset dir="${dist.dir}" preserveLeadingSlashes="true"> 
			    <include name="${ant.project.name}-${project.version}-install.jar"/>
			</tarfileset>
		</tar>		      
		<gzip destfile="${dist.dir}/${ant.project.name}-${project.version}-install.tar.gz" src="${dist.dir}/${ant.project.name}-${project.version}-install.tar"/>
		<delete file="${dist.dir}/${ant.project.name}-${project.version}-install.tar"/>
		
		<copy file="${basedir}/build/installer/install.sh.template" tofile="${dist.dir}/install.sh.template"/>		
		<echo file="${dist.dir}/install.sh.template" append="true" message="PAYLOAD:${line.separator}"/>
		<replace file="${dist.dir}/install.sh.template">
			<replacefilter token="@@version@@" value="${project.version}"/>
			<replacefilter token="@@name@@" value="${ant.project.name}"/>
			<replacefilter token="@@file@@" value="${ant.project.name}-${project.version}-install.jar"/>
			<replacefilter token="@@mode@@" value="0"/>
		</replace>
		
		<concat destfile="${dist.dir}/${ant.project.name}-${project.version}-install.sh" binary="yes">
			<fileset file="${dist.dir}/install.sh.template"/>
			<fileset file="${dist.dir}/${ant.project.name}-${project.version}-install.tar.gz"/>
		</concat>
		<delete file="${dist.dir}/install.sh.template"/>
		<chmod file="${dist.dir}/${ant.project.name}-${project.version}-install.sh" perm="ugo+rx"/>
		
		<!-- Make a native setup.exe out of the installer -->
		<unzip src="${installer.dir}/installer-wrappers.zip" dest="${dist.dir}"/>		
		<chmod file="${dist.dir}/wrappers/izpack2exe/izpack2exe.py" perm="ugo+x"/>
		<chmod file="${dist.dir}/wrappers/izpack2exe/7za" perm="ugo+x"/>
		<chmod file="${dist.dir}/wrappers/izpack2exe/setup.py" perm="ugo+x"/>
		<chmod file="${dist.dir}/wrappers/izpack2exe/upx" perm="ugo+x"/>
		
		<exec dir="${dist.dir}/wrappers/izpack2exe" executable="./izpack2exe.py" failonerror="true">
			<arg value="--file=&quot;${installer.dir}/install.xml&quot;"/>
		</exec>
		
		<zip zipfile="${dist.dir}/${ant.project.name}-${project.version}-install-windows.zip" compress="true">
			<zipfileset file="${dist.dir}/wrappers/izpack2exe/setup.exe" prefix=""/>
		</zip>
		
		<!-- Create a native mac installer -->
		<copy todir="${dist.dir}/wrappers/izpack2app">
			<fileset dir="${installer.dir}/Mac-App-Template" includes="**/*"/>
		</copy>
		<chmod file="${dist.dir}/wrappers/izpack2app/izpack2app.py" perm="ugo+x"/>
		<chmod file="${dist.dir}/wrappers/izpack2app/setup.py" perm="ugo+x"/>
		
		<exec dir="${dist.dir}/wrappers/izpack2app" executable="./izpack2app.py" failonerror="true">
			<arg file="${dist.dir}/${ant.project.name}-${project.version}-install.jar"/>
			<arg file="${dist.dir}/${ant.project.name}-${project.version}-macosx.app"/>
		</exec>
		
		<delete dir="${dist.dir}/wrappers"/>
	</target>

	<target name="dist" depends="clean,run-tests,javadoc,docs,jars,installer"/>	
</project>
